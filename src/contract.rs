use super::{_fetch_input, _input_length};

/// This trait defines a function that will be called on a contract.
/// The implementation is generated by the derive Macro but this must
/// be included by the contract implementation.
pub trait ContractInterface {
    fn execute(&mut self, payload: &[u8]) -> Vec<u8>;
}

/// Get the arguments encoded from the Runtime
pub fn arguments() -> Vec<u8> {
    let length = unsafe { _input_length() };
    let mut args: Vec<u8> = Vec::with_capacity(length as usize);
    unsafe {
        args.set_len(length as usize);
        _fetch_input(args.as_mut_ptr());
    }

    args
}
